from sage.all import *
from Crypto.Util.number import *
from gmpy2 import iroot
from libnum import *
from random import *
# 下面获取flag1
n = 22435848699656439430048260540176288030655042508109245348203445122056847876996607608611892056743501586488889168983607278397416470209194916985023908893310155270591748740126867248701139828665276853343163829939990987331026735495951912477601815131279382932153740508597542224648089775796802134745882144397328618204142989152751641372904445512671873582920538213880923397228305140234250303290009967109582828057519833587016281762379014389003814474573177719458550439800992452142920397237367310205204735952714220809997458836826342346730887267026568707643698737124998719830204084696971082358216392528426050106025032379139014423321
d = 20354412116269121510293104896444513282005945339570286117350965660612526671760792060149535621835144680437831770002273112374629994999457819337059141393701114761393145922236289855875677570566105500947768981625176573702001333986589568805832548629673255421091601642011486973263101325101577385857213692790105959115036385282675843417550399809724681031192529462528642112438295398315448676494393444923898200165689737396930202324686274876268952582257404549544075682059970937186448224276371016928222330204265425683795781628651310585874703339472767170154876297183452730676130031932279053647967819682281776997897365217554415144033
e = 8545970560619293415863869061629533131353052726527575105498824066096173134202176407771698168891393791901508803718121936403456285176580496345915728675609872087314945931309067503425183949923543095686689494879877359916226960617400586139116144067054907570518268413146641607525379529898998165978606786256497
c = 17208039537612825516747747878451966796120839641453197811745943450387215029980143252298866765386258366964704956107202728668453189436311383104017230316824503104192120754592188140860077450499901758898311008990707821123572736111805013388976133948732183654932878173674813982349517829145629555764948009535371050231553730823883215738704410561544672350728718269759703288288480665118982616042097028169710775672403103646694081696142297008847942639335715629545722107760119795737487838136067725445300808857250119963001634053526259681138127266703659084123296950022775198691600472211227341298838458948960470823254499392585524087918
k=d*e-1
temp = 0
while True:
    g=randint(n//10,n-1)
    k1=k
    while k1%2==0:
        k1 = k1 // 2
        x=pow(g,k1,n)
        p = math.gcd(x-1,n) %n
        if x>1 and p>1:
            q=n//p
            temp = 1
            break
    if temp==1:
        break
print(p)
print(q)
d = invmod(e, (p-1)*(q-1))
flag1 = n2s(pow(c, d, n))
print(flag1)


#下面获取flag2
e = 3
c = 574808471478635333245317783955856232370563895750738178995495491244722220578259862014622258456002771074212202993749856311345778504
n = 132275218780270789276875142391448867650895270629670759900527027384204094378702805212980599389161642078516147410438758869570165283020546983219261613517162232406493853982513805637479563931664593533545755290425758761320070903155316315225168568823850902007487296420757650976479888059670760410374801967212927224977
print(n2s(iroot(c, 3)[0]))


# 下面获取flag3
c = 95995020771266284668771773954095383926073034180948646028969032401939359632605448469918019304830962431504319950829514957438851980885420908331400633412921367641226567936331249173469086850004952349859327253487176970823999803143210342915194996505332578787985234930535548547834345641331406894553696409553432127676252530117997529863647389804169829603847371009965333521992075291993986519143392110820521102789536579717013822114100961105599532067858175576407477678474343
hint = 331827959959669362980903675700579680333727515633777861628619061160155873334438387426601431102578757478220073973755314614841843834177072237961383958721650387302854513037804229759753543773380647137880844819226502619093178213699654143169541320688758073525229779021778299681565211604935016493932946601713080358152349008389888320122977378245126603180345245359431242722391116674672049868497727142316387043599105147729557199319037013456439001531544933422509782305382177
n = 617084232354634109322171875468612900428229667931513848806770839434059627069484990725607996303673918867720768751727135179953407336155782580734284839136278190669702346600358059275099682118093888920038165877388324627028766987891732872124755908892972046287450095353992961045719531391795505441739616388353911919212662674941754442327213528963862921107314349391130370460483255191809581325731848910365215670220922837774417042794328874852028405333599359662323013152032901
e = 0x10001
tmp = pow(e, e, n)
p = GCD((hint * tmp) % n - 1, n)
print(p)
q = n // (p * p)
d = inverse(e, p * (p-1) * (q-1))
flag3 = long_to_bytes(pow(c, d, n))
print(flag3)


# 下面获取flag4
d = 242618035035163469434322293327938405750017912799190107714591368086742881522661519860077104080961
c = 742481710491632202304950326079681148354035306250917295914498846416723687179474088162312486652622
e = 65537
kphi = e * d - 1
print("[+]kphi =", kphi)
divisor = divisors(kphi)
for pm1 in divisor:
    p = pm1 + 1
    # print("[+]Try p =", p)
    if isPrime(p) and int(p).bit_length() == 160:
        for k in range(1, e):
            if kphi % k != 0:
                continue
            q = (kphi // k // pm1) + 1
            # print("[+]Try q =", q)
            if isPrime(q) and int(q).bit_length() == 160:
                print("[+]p =", p)
                print("[+]q =", q)
                n = p * q
                m = pow(c, d, n)
                msg = long_to_bytes(int(m))
                print(b"msg = " + msg)