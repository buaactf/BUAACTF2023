from Crypto.Util.number import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from hashlib import sha256
from random import randint
from libnum import invmod, n2s
from secret import flag

def LCG(a, s, b, p):
    return (a * s + b) % p

def LCG_n(a, s, b, p, n):
    for _ in range(n):
        s = LCG(a, s, b, p)
    return s

p = getPrime(1024)
a = getPrime(512)
b = getPrime(512)
s = a * b
assert s < p

sk_a = randint(1, p)
sk_b = randint(1, p)

pk_a = LCG_n(a, s, b, p, sk_a)
pk_b = LCG_n(a, s, b, p, sk_b)

key_a = LCG_n(a, pk_b, b, p, sk_a)
key_b = LCG_n(a, pk_a, b, p, sk_b)
assert key_a == key_b

print("p: ",p)
print("s: ",s)
print("pka: ",pk_a)
print("pkb: ",pk_b)
    
leak = a ** 5 - b ** 3
print("leak: ", leak)

key = sha256(str(key_a + s).encode()).digest()[:16]
iv = bytes(n2s(randint(0, 2 ** 128)))
cipher = AES.new(key, AES.MODE_CBC, iv=iv)
c = cipher.encrypt(pad(flag, 16))
print("iv: ", iv.hex())
print("c: ",c)


"""
p: 110045941581246566163852236169863726493322518614291259738650243772537777220447239564993293840178002270803358414801874876416861655681706091960526864981702297311975108477231430850046449802619712390151394990272883738498246287828012579651055043742174921894177086628278972268977919519134723993840866617728971125501
s: 103083435269546339253719292770367969157635923310796947624819807524514689714230038488629636887588073083408362510426148038690685619752778205013088349018307009939108678198113606930036410404549808586987764543060403391315169316818289657581541763263327670573813529568272160960214773113382466107788108424376942305179
pk_a: 104249886397359747249273092453488313866919664956033370839273165940023672119280749446507600277914299719461300855987124305389892009846065290488788845690592952592538823773157304003987554741970547804984472643400001801640946933980112156093413786073659705669257814748840719625590155866880068232234070029543099326008
pk_b: 73943176009325878591909652784371325868093784459904155452171082544674415915957790552228923092972996591011414909913381038800791214834557764389213534028507829053436031472854955231610581309098048200856194242071844838535785588222371659431886892907007805510914868507217421041100993332508303713741693778352086616092

leak: 29040777564893836055576935754958349303880224434489606637225123765874859084299305072404829973337935904266301029232783978449958360875461566254630838251549934932706914467564998782070045758886430608783726619661530870388938391442492043731894115397400015449950051951769344001061013880264004181568996494392695873947102851715933737547680797285706746028093745905399081868517548754953070086517995947839613006470389399208171194194504365074914947024889949570680226668773867669172700292722732348438746947857754535156207414199788546164281701388891687436649862876851080136461979528906440369488791240780833837652254029174364644864043838626162283607643013213942931346399529512644954169730170267869381208558883655869400666658812252861841021468606579935712846111089021383151894750921351386

iv: e759b23de290a6d4ea11dab4b0c306f3
c: b'\xa8\x83\x8b,\x14\x1ad\xfb\xfd\x12\xc6\xc1=\xa0+k\x05\xc7\xc9\xed\xde\xca>\x04\xe1;\xcc\xc1\xb6\x9a+\xe66d\xcf\x9b\xfftp\x81\xab\xbf(\x02\xcd\x0b\xa4\xc0Lpg\x83F\x82l\xad2\xdcI\x1ab\x08\x88\n'
"""
